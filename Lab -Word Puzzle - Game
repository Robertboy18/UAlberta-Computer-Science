Word Puzzle

Word Puzzle is a game where the player will try guessing a secret word one letter at a time. 
It is much like the game, hangman. 
You will program a text-based version of Word Puzzle, incrementally building in new features over three versions of the game.

---------------------------------------------------------------------------------------------------------------------------------------
Version 1:
# Word Puzzle
# Word Puzzle is a game where the player will try guessing a secret word one letter at a time.
# In version 1 the player just has one guess and guesses only the first letter of the word
# The number of guesses remaining is not displayed when the user is prompted for a guess
# The updated puzzle (with filled-in and/or missing letters) is not displayed after the player's guess
# If the player correctly guesses the starting letter the program displays a congratulatory message with the word
# Otherwise, it displays a failure message with the same correct word.

import random


def main():
    f = open("instructions.txt", "r")  # get the file
    if f.mode == 'r':  # to check if its open in read mode
        contents = f.read()
        print(contents)
    words = ['apple', 'banana', 'watermelon', 'kiwi', 'pineapple', 'mango']
    list_of_words = words[random.randrange(len(words))]  # to get a random word from the list
    print("The answer so far is _", list_of_words[1:])  # slices the word and prints out from index 1 onwards
    guess = input("Guess a letter:")  # input the letter
    if guess == list_of_words[0]:  # Checking if the guessed letter is equal to the first letter of the word
        congratulations = "Good job! You found the word {}{}"  # if the guess is correct
        print(congratulations.format(list_of_words, '.'))
    else:
        condolences = "Not quite,the correct word was {}{} Better luck next time"  # if the guess is incorrect
        print(condolences.format(list_of_words, '.'))

    print("Press enter to end the game")  # To end the game


main()
---------------------------------------------------------------------------------------------------------------------------------------

Version 2:
# Word Puzzle
# Word Puzzle is a game where the player will try guessing a secret word one letter at a time.
# In version 2 the player just has one guess and guesses any letter of the word
# The number of guesses remaining is not displayed when the user is prompted for a guess
# The updated puzzle (with filled-in and/or missing letters) is displayed only once after the player's guess
# If the player correctly guesses the starting letter the program displays a congratulatory message with the word
# Otherwise, it displays a failure message with the same correct word and same number of empty underscores

import random  # contains the randrange function


def main():  # initialize failed to zero
    failed = 0

    file = open("instructions.txt", "r")  # get the file
    if file.mode == 'r':  # to check if its open in read mode
        contents = file.read()
        print(contents)  # to print the contents
        file.close()

    words = ['apple', 'banana', 'watermelon', 'kiwi', 'pineapple', 'mango']
    list_of_words = words[random.randrange(len(words))]  # to get a random word from the list
    length_of_word = len(list_of_words)  # Find the length of the word

    to_guess = []  # create a list
    for char in range(length_of_word):
        to_guess.append("_ ")  # append the underscore to the list

    print("The answer so far is " + "".join(to_guess))
    guess = input("Guess a letter: ")  # input the guessed letter

    for i in range(length_of_word):  # in the range of the length of the word
        if guess == list_of_words[i]:  # if the guessed letter is equal to any of letters in the string
            to_guess[i] = list_of_words[i]  # replace the underscore with the guessed letter
            failed = failed + 1

    print("The answer so far is " + " ".join(to_guess))  # print out the answer so far

    if failed != 0:
        congratulations = "Good job! You found the word {}{}"  # if the guess is correct
        print(congratulations.format(list_of_words, '!'))
    else:
        condolences = "Not quite,the correct word was {}{} Better luck next time"  # if the guess is incorrect
        print(condolences.format(list_of_words, '.'))

        print("Press enter to end the game")  # To end the game


main()
---------------------------------------------------------------------------------------------------------------------------------------

Version 3:
# Word puzzle
# This is version 3
# This is a guessing game.
# The user is supposed to guess a word by guessing the letter in the word
# The number of guesses decrease each time an incorrect guess is made
# If the gamer exhausts the number of guesses, he loses.
# If the player correctly guesses the correct letters withing 4 guesses
# The program displays a congratulatory message with the word
# Otherwise, it displays a failure message with the same correct word


import random  # This module contains the necessary random functions


def display_instructions(filename):
    mode_read = 'r'  # assign the read mode

    instruction_txt_file = open(filename, mode_read)

    instructions = instruction_txt_file.read()  # read the contents

    print(instructions)  # print the contents of instructions.txt

    instructions = instruction_txt_file.close()  # close the file


def play_game(puzzle, answer):
    # This is the number of guesses at the beginning
    initial_guesses = 4

    old_guess = []  # store the user guesses

    while initial_guesses >= 1:
        # Input the users guess
        guess = get_guess(initial_guesses)

        # updating the puzzle with the users guess
        # Puzzle is the current form of the word
        # answer is randomly chosen word
        # guess is the users guess
        update_puzzle_string(puzzle, answer, guess)

        display_puzzle_string(puzzle)  # displays the current state of the puzzle

        answer = list(answer)  # return the bool for the answer

        check_win = is_word_found(puzzle, answer)  # check if it is present

        # This loop changes the num_guesses based on the guess
        if guess not in answer:
            initial_guesses = initial_guesses - 1  # decrease the counter
        else:
            if guess in old_guess:
                initial_guesses = initial_guesses - 1
            else:
                initial_guesses = initial_guesses

        old_guess = store_previous_guess(guess)  # store the current guess

        # The while is broken if the word is found before num_guess = 1
        if check_win == 'Y':
            break

    # This tells the gamer whether he won or lost the game
    display_result(check_win, answer)


def get_guess(num_guesses):
    # This is the users guess

    guess = input('Guess a letter (' + str(num_guesses) + ' guesses remaining):')
    return guess


def update_puzzle_string(puzzle, answer, guess):
    # to replace the underscores with the correct letter guessed
    for n, x in enumerate(answer):
        if guess == x:  # checking equality of the letter in the word and the guessed letter
            puzzle[n] = x  # replacing the underscore with the letter
    return puzzle


def display_puzzle_string(puzzle):
    answer_so_far = ''  # the answer is initialized to a string which is empty

    for x in puzzle:
        answer_so_far = answer_so_far + " " + x # append the current answer with the letter

    print('The answer so far is', answer_so_far + '.')  # print the current state of the answer

    return puzzle


def is_word_found(puzzle, answer):
    if puzzle == answer:  # checking if the answer == puzzle
        is_win = 'Y'  # assigning Y to the variable
    else:
        is_win = 'N'  # assigning N to the variable
    return is_win


def display_result(check_win, answer):
    # Final answer is a string with the state of the puzzle so far
    final_answer = ''
    for x in answer:
        final_answer = final_answer + x  # the word appended
    if check_win == 'Y':
        print('Good job! You found the word', final_answer + '.')
    else:
        print('Not quite, the correct word was', final_answer + '.', )


def store_previous_guess(guess):
    old_guess = []
    for x in guess:   # if the letter is present append it into old guess list
        old_guess.append(x)
    return old_guess  # return the list


def main():   # main function

    filename = 'instructions.txt'  # 1
    display_instructions(filename)  # 1 function usage

    # This is a list of words that the game will choose at random.
    list_of_words = ['apple', 'banana', 'watermelon', 'kiwi', 'pineapple', 'mango']

    # This is the word selected to be the puzzle
    answer = random.choice(list_of_words)

    # list representing the current state of the puzzle
    current_puzzle = []

    # This converts the string in answer into a puzzle
    for x in answer:
        current_puzzle.append(x)

    for i, x in enumerate(current_puzzle):  # replacing the tuple
        current_puzzle[i] = '_ '  # replacing the underscores

    print('The answer so far is', '_ ' * len(answer) + '.')  # print the current answer

    play_game(current_puzzle, answer)  # call the function to play the game

    input('Press enter to end game')


main()
