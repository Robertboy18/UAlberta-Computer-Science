Memory Game
The Memory game has appeared in many different contexts, either as a computer game or as a card game that uses a partial or full deck of playing cards.
The player tries to find two matching tiles by selecting tiles from a rectangular grid. This game also appeared as a popular American TV show called Concentration.
We will create a single person game that tracks the score of the player as the time taken to complete the game, where a lower score is better. 
Multiple players can take turns playing the game and compete by comparing their scores

----------------------------------------------------------------------------------------------------------------------------------------
Version 1:
# Memory version 1
# In version 1 all the images are displayed
# no controls provided and no score displayed
# the images are all shuffled randomly each time the game is run

import pygame  # pygame module
import random  # random module


# User-defined functions

def main():
    # initialize all pygame modules (some need initialization)
    pygame.init()
    # create a pygame display window
    pygame.display.set_mode((500, 400))
    # set the title of the display window
    pygame.display.set_caption('Memory')
    # get the display surface
    w_surface = pygame.display.get_surface()
    # create a game object
    game = Game(w_surface)
    # start the main game loop by calling the play method on the game object
    game.play()
    # quit pygame and clean up the pygame window
    pygame.quit()


# User-defined classes

class Game:
    # An object in this class represents a complete game.

    def __init__(self, surface):
        # Initialize a Game.
        # - self is the Game to initialize
        # - surface is the display window surface object

        # === objects that are part of every game that we will discuss
        self.surface = surface
        self.bg_color = pygame.Color('black')

        self.FPS = 60
        self.game_Clock = pygame.time.Clock()
        self.close_clicked = False
        self.continue_game = True

        # === game specific objects
        self.board = []
        self.board_size = 4
        self.create_board()
        self.image = []
        self.image_transform = []

    def create_board(self):  # create board function
        Tile.set_surface(self.surface)
        self.image = [pygame.image.load('image' + str(i) + ".bmp") for i in range(1, 9)] * 2

        """" for i in range(1, 9):
                picture = self.image[i]
                picture = pygame.transform.scale(picture, (90, 90))
                self.image_transform.append(picture)
        """

        random.shuffle(self.image)
        index = 0
        width = self.image[0].get_width()  # get width
        height = self.image[0].get_height()  # get height
        # creating the 4*4 matrix
        row_wise = []
        for row_index in range(self.board_size):
            for col_index in range(self.board_size):
                x = width * col_index  # calculate x coordinate
                y = height * row_index  # calculate y coordinate
                tile = Tile(x, y, self.image[index])
                index += 1  # create each tiles attributes
                row_wise.append(tile)  # append it into the matrix row
            self.board.append(row_wise)  # final matrix

    def play(self):
        # Play the game until the player presses the close box.
        # - self is the Game that should be continued or not.

        while not self.close_clicked:  # until player clicks close box
            # play frame
            self.handle_events()  # get the events
            self.draw()
            if self.continue_game:  # check game condition
                self.update()
                self.decide_continue()
            self.game_Clock.tick(self.FPS)  # run at most with FPS Frames Per Second

    def handle_events(self):
        # Handle each user event by changing the game state appropriately.
        # - self is the Game whose events will be handled

        events = pygame.event.get()
        for event in events:
            if event.type == pygame.QUIT:
                self.close_clicked = True

    def draw(self):
        # Draw all game objects.
        # - self is the Game to draw

        self.surface.fill(self.bg_color)  # clear the display surface first
        # Draw the tiles
        for row_tile in self.board:
            for column_tile in row_tile:
                column_tile.draw()
        pygame.display.update()  # make the updated surface appear on the display

    def update(self):
        # Update the game objects for the next frame.
        # - self is the Game to update
        pass

    def decide_continue(self):
        # Check and remember if the game should continue
        # - self is the Game to check
        pass


class Tile:
    # An object in this class represents a tile that shows
    # Shared attributes or Class Attributes
    surface = None
    border_size = 8
    border_color = pygame.Color('black')

    def __init__(self, x, y, image):  # constructor of the class
        self.image = image
        width = self.image.get_width()  # get the width of the image
        height = self.image.get_height()  # get  the height of the image
        self.rect = pygame.Rect(x, y, width, height)

    @classmethod  # decorator used here
    def set_surface(cls, game_surface):
        cls.surface = game_surface

    def draw(self):
        # Draw the tile on the surface
        # - self is the tile
        pygame.draw.rect(Tile.surface, Tile.border_color, self.rect, Tile.border_size)
        Tile.surface.blit(self.image, self.rect)
        # Instance Methods


main()
--------------------------------------------------------------------------------------------------------------------------------
Version 2:
# Memory version 2
# This is memory version 2 game
# There are 16 images on the board and 8 pairs of them
# The user in version 2 is allowed to click on them and the image is shown
# The counter increases per second
# After all the 16 images are shown the game ends

import pygame  # pygame module
import random  # random module for shuffle


def main():  # user defined functions
    # initialize all pygame modules (some need initialization)
    pygame.init()
    # create a pygame display window
    pygame.display.set_mode((500, 400))
    # set the title of the display window
    pygame.display.set_caption('Memory')
    # get the display surface
    w_surface = pygame.display.get_surface()
    # create a game object
    game = Game(w_surface)
    # start the main game loop by calling the play method on the game object
    game.play()
    # quit pygame and clean up the pygame window
    pygame.quit()


class Game:
    # An object in this class represents a complete game.

    def __init__(self, surface):
        # Initialize a Game.
        # - self is the Game to initialize
        # - surface is the display window surface object

        # === objects that are part of every game
        self.surface = surface
        self.bg_color = pygame.Color('black')
        self.game_Clock = pygame.time.Clock()
        self.close_clicked, self.continue_game = False, True

        # === game specific objects
        self.image_select, self.board, self.image, self.x = [], [], [], []
        self.board_size = 4
        self.sc = 0
        self.create_board()

    def create_board(self):
        Tile.set_surface(self.surface)
        self.image = [pygame.image.load('image' + str(i) + ".bmp") for i in range(1, 9)] * 2

        """" for i in range(1, 9):
                picture = self.image[i]
                picture = pygame.transform.scale(picture, (90, 90))
                self.image_transform.append(picture)
        """

        random.shuffle(self.image)
        index = 0
        width = self.image[0].get_width()  # get width
        height = self.image[0].get_height()  # get height
        # creating the 4*4 matrix
        row_wise = []
        for row_index in range(self.board_size):
            for col_index in range(self.board_size):
                x = width * col_index  # calculate x coordinate
                y = height * row_index  # calculate y coordinate
                tile = Tile(x, y, self.image[index])
                index += 1  # create each tiles attributes
                row_wise.append(tile)  # append it into the matrix row
            self.board.append(row_wise)  # final matrix

    def play(self):
        # Play the game until the player presses the close box.
        # - self is the Game that should be continued or not.

        while not self.close_clicked:  # until player clicks close box
            self.handle_events()  # handle the events
            self.draw()  # call the draw function
            if self.continue_game:
                self.update(), self.decide_continue()
            self.game_Clock.tick(60)  # run at most with FPS Frames Per Second

    def handle_events(self):
        # Handle each user event by changing the game state appropriately.
        # - self is the Game whose events will be handled

        events = pygame.event.get()  # call the events
        for event in events:
            if event.type == pygame.QUIT:  # if the game ends
                self.close_clicked = True  # change close to true
            elif event.type == pygame.MOUSEBUTTONUP:  # if image equal to clicked
                self.mouse(event)  # handle using the function

    def mouse(self, event):  # mouse click event function
        for each_row in self.board:  # for each row in the board
            for each_tile in each_row:  # for each tile in the row
                point = each_tile.pointer(event.pos)  # get the event
        self.image_select.append(point)  # append to the list

    def draw(self):
        # Draw all game objects.
        # - self is the Game to draw
        # draw the tiles
        self.surface.fill(self.bg_color)  # clear the display surface first
        self.draw_score()  # draw the score
        x = []
        for row_tile in self.board:  # draw each row_tile
            for column_tile in row_tile:
                column_tile.draw()  # draw each column
        pygame.display.update()  # make the updated surface appear on the display

    def update(self):
        # Update the game objects for the next frame.
        # - self is the Game to update
        self.sc = pygame.time.get_ticks() // 1000
        self.draw_score()

    def draw_score(self):  # scoreboard 
        score_color = pygame.Color('white')  # white font 
        font = pygame.font.SysFont('', 50)  # size of the font
        score_box = font.render(str(self.sc), True, score_color)  # draw the score
        width_sb = score_box.get_width()  # get the width
        surface_sb = self.surface.get_width()  # get the height
        location_sb = (surface_sb - width_sb, 0)  # location of the score box
        self.surface.blit(score_box, location_sb)  # display it

    def decide_continue(self):
        # Check and remember if the game should continue
        # - self is the Game to check
        final_size = len(self.image_select) // 2  # find the length of the list of images
        if final_size >= 8:  # if all the images have been clicked
            self.continue_game = False  # end game 


class Tile:
    # An object in this class represents a tile that shows
    # Shared attributes or Class Attributes
    surface, border_size = None, 10
    border_color = pygame.Color('black')
    cover_image = pygame.image.load('image0.bmp')

    def __init__(self, x, y, image):  # constructor of the class 
        self.image = image
        self.rect = pygame.Rect(x, y, self.image.get_width(), self.image.get_height())
        self.similar, self.press = [False, False]  # to check similar images and to check if the image has been clicked

    @classmethod  # decorator used here 
    def set_surface(cls, game_surface):
        cls.surface = game_surface

    def pointer(self, screen_position):  # pointer function
        if self.rect.collidepoint(screen_position):  # check if the image has been clicked
            self.press = True  # assign it to true

    def draw(self):
        # Draw the tile on the surface
        # - self is the tile
        # instance methods
        if not self.press:  # if clicked draw reveal images
            pygame.draw.rect(Tile.surface, Tile.border_color, self.rect, Tile.border_size)
            Tile.surface.blit(self.cover_image, self.rect)
        else:  # else just draw
            pygame.draw.rect(Tile.surface, Tile.border_color, self.rect, Tile.border_size)
            Tile.surface.blit(self.image, self.rect)


main()
--------------------------------------------------------------------------------------------------------------------------------------

Version 3:
# Memory version 3
# This is memory version 3 game
# There are 16 images on the board and 8 pairs of them
# The user in version 3 is allowed to click on them and the image is shown
# The user then chooses the  next image and if its the checked it stays
# Otherwise it fades back into the cover image
# The counter increases per second
# After all the 16 images are shown the game ends

import pygame  # pygame module
import random  # random module for shuffle
import time  # time module


def main():  # user defined functions
    # initialize all pygame modules (some need initialization)
    pygame.init()
    # create a pygame display window
    pygame.display.set_mode((500, 400))
    # set the title of the display window
    pygame.display.set_caption('Memory')
    # get the display surface
    w_surface = pygame.display.get_surface()
    # create a game object
    game = Game(w_surface)
    # start the main game loop by calling the play method on the game object
    game.play()
    # quit pygame and clean up the pygame window
    pygame.quit()


class Game:
    # An object in this class represents a complete game.

    def __init__(self, surface):
        # Initialize a Game.
        # - self is the Game to initialize
        # - surface is the display window surface object

        # === objects that are part of every game that we will discuss
        self.surface = surface
        self.bg_color = pygame.Color('black')
        self.game_Clock = pygame.time.Clock()
        self.close_clicked = False
        self.continue_game = True

        # === game specific objects
        self.score, self.sc = [0, 0]
        self.image_pointer, self.pre_image, self.image_select, self.board, self.image, self.x = [[], [], [], [], [], []]
        self.board_size = 4
        self.create_board()

    def create_board(self):
        Tile.set_surface(self.surface)
        self.image = [pygame.image.load('image' + str(i) + ".bmp") for i in range(1, 9)] * 2

        """" for i in range(1, 9):
                picture = self.image[i]
                picture = pygame.transform.scale(picture, (90, 90))
                self.image_transform.append(picture)
        """

        random.shuffle(self.image)
        ni = 0
        width = self.image[0].get_width()  # get width
        height = self.image[0].get_height()  # get height
        # creating the 4*4 matrix
        row_wise = []
        for row_ni in range(self.board_size):
            for col_ni in range(self.board_size):
                x = width * col_ni  # calculate x coordinate
                y = height * row_ni  # calculate y coordinate
                tile = Tile(x, y, self.image[ni])
                ni += 1  # create each tiles attributes
                row_wise.append(tile)  # append it into the matrix single_row
            self.board.append(row_wise)  # final matrix

    def play(self):
        # Play the game until the player presses the close box.
        # - self is the Game that should be continued or not.

        while not self.close_clicked:  # until player clicks close box
            self.handle_events()  # handle the events
            self.draw()  # call the draw function
            if self.continue_game:
                self.update(), self.decide_continue()
            self.game_Clock.tick(60)  # run at most with FPS Frames Per Second

    def handle_events(self):
        # Handle each user event by changing the game state appropriately.
        # - self is the Game whose events will be handled

        events = pygame.event.get()  # call the events
        for event in events:
            if event.type == pygame.QUIT:  # if the game ends
                self.close_clicked = True  # change close to true
            elif event.type == pygame.MOUSEBUTTONUP:  # if image equal to clicked
                self.mouse(event)  # handle using the function

    def mouse(self, event):  # the event queue for the mouse
        for single_row in self.board:  # each row in the board
            for each_tile in single_row:  # each tile in each row
                each_tile.pointer2(event.pos)  # get the pointer
                final_pointer = each_tile.pointer(event.pos)  # get the pointer for the final image
                # here we are getting the pointer
                if final_pointer:  # if true
                    if each_tile not in self.pre_image:
                        self.pre_image.append(each_tile)  # append to the previous image list
                    else:
                        pass
        self.image_select.append(each_tile)

    def draw(self):
        # Draw all game objects.
        # - self is the Game to draw
        # draw the tiles and surface
        self.surface.fill(self.bg_color)  # clear the display surface first
        self.draw_score()  # draw the score
        for single_row in self.board:
            for single_tile in single_row:  # each tile in the row
                single_tile.draw()  # draw the tile
        pygame.display.update()  # make the updated surface appear on the display

    def draw_score(self):
        score_color = pygame.Color('white')  # white font
        font = pygame.font.SysFont('', 50)  # size of the font
        # sco = pygame.time.get_ticks() // 1000
        score_box = font.render(str(self.sc), True, score_color)  # score_box render
        width_sb = score_box.get_width()  # get the height
        surface_sb = self.surface.get_width()  # get the width
        location_sb = (surface_sb - width_sb, 0)  # location of the score box
        self.surface.blit(score_box, location_sb)  # display it

    def lengthx(self, size):  # return the len of the argument
        return len(size)

    def decide_continue(self):
        # Check and remember if the game should continue
        # - self is the Game to check
        final_size = self.lengthx(self.image_pointer) // 2  # find the length of the list of pair of images
        if final_size >= 8:  # if all the images have been clicked
            self.continue_game = False  # end game

    def update(self):
        # Update the game objects for the next frame.
        # - self is the Game to update
        self.draw_score()
        self.sc = pygame.time.get_ticks() // 1000  # get the number of seconds elapsed

        # equality image check condition
        if 1 < self.lengthx(self.pre_image):  # if less than 2
            if self.pre_image[0] == self.pre_image[1]:  # check the two images
                checked = True  # assign it to true if equal
            else:
                checked = False  # else false

            if checked:
                assert isinstance(self.pre_image, object)  # would raise an error if its not true an assertion error
                for i in (0, 1):
                    self.image_pointer.append(self.pre_image[i])  # append to the image_pointer
            else:
                for i in (0, 1):
                    self.pre_image[i].show()  # else show the image i
                time.sleep(1)  # make it wait for a second before closing
            self.pre_image.clear()  # clear the preimage list


class Tile:
    # An object in this class represents a tile that shows
    # Shared attributes or Class Attributes
    surface, border_size = [None, 10]
    border_color = pygame.Color('black')
    cover_image = pygame.image.load('image0.bmp')

    # Instance Methods
    def __init__(self, x, y, image):  # constructor of the class
        self.image = image
        self.rect = pygame.Rect(x, y, self.image.get_width(), self.image.get_height())
        self.chose, self.shown, self.press = [False, False, False]  # equality conditions

    @classmethod  # decorator used here
    def set_surface(cls, game_surface):
        cls.surface = game_surface

    def __eq__(self, previous):  # operator overloading
        if self.image == previous.image:
            if self.shown:  # check if the image is showing
                return True  # return true
            else:
                return False  # return false
        else:
            return False  # return false

    def pointer(self, screen_position):  # pointer to check
        if self.rect.collidepoint(screen_position):  # check if the image has been clicked
            self.chose = True  # assign it equal to true
            return True  # else false
        else:
            return False  # else false

    def pointer2(self, screen_position):  # pointer function
        if self.rect.collidepoint(screen_position):  # check if the image has been clicked
            self.press = True  # assign it to true

    def draw(self):
        # Draw the tile on the surface
        # - self is the tile
        if self.chose:  # if the chosen image is true
            self.shown = True  # reveal them
            pygame.draw.rect(Tile.surface, Tile.border_color, self.rect, Tile.border_size)
            Tile.surface.blit(self.image, self.rect)  # draw the tile
        else:  # if not
            self.shown = False  # change the option
            pygame.draw.rect(Tile.surface, Tile.border_color, self.rect, Tile.border_size)
            Tile.surface.blit(self.cover_image, self.rect)  # draw the tile

    def show(self):  # function to assign these two values when an image is clicked
        self.chose = False  # to check the chosen image


main()
