
def display_instructions(filename):
    """
    This function splits the read file and returns it.

    It reads a file and then assigns it into instructions.

    :param filename:
    :return: instructions.split("\n")

    """
    mode_read = 'dict_List'  # assign the read mode
    instruction_txt_file = open(filename, mode_read)
    instructions = instruction_txt_file.read()  # read the contents
    instruction_txt_file.close()
    return instructions.split("\n")


def read(text):
    """
    This function splits the passed parameter and returns it.

    :param text:
    :return: text.split("\n")

    """
    return text.split("\n")


def dict_Assign(final_availability, unique_Dict, checker):
    """
    This function either converts a list into a dictionary for the required key and value.

    It also depending on the value of checker will convert the string to float for the index 2 of the list.

    :param final_availability:
    :param unique_Dict:
    :param checker:
    :return: None

    """
    if checker == 1:
        for index in final_availability:
            unique_Dict[index[0]] = index[2]
    elif checker == 2:
        for index in final_availability:
            index[2] = float(index[2])


def max_list(maximum_List, final_Max_List):
    """
    This function appends the maximum values of the suppliers to a list.

    It first compares the suppliers code and then appends the similar values
    It then adds the price and then appends that to the final list.

    :param maximum_List:
    :param final_Max_List:
    :return: None
    """
    cost_Per_Supplier = 0
    for index in range(len(maximum_List)):
        for index_2 in range(len(maximum_List)):
            if maximum_List[index][0] == maximum_List[index_2][0]:
                cost_Per_Supplier += float(maximum_List[index_2][1])
                final_Max_List.append([maximum_List[index_2][0], round(cost_Per_Supplier, 2)])
        cost_Per_Supplier = 0


def make_Final_List(dict_List, final_suppliers, zero_List, final_onshelves, first_List, final_products, second_List):
    """
    This function appends lists together.

    It takes 7 paramters where 3 of them are new lists and the rest 4 are the ones which are gonna be appended.
    It compares all the products code and suppliers numbers and then when they match they get appended.
    It then adds the required lists and appends it to the numbered list in order.

    :param dict_List:
    :param final_suppliers:
    :param zero_List:
    :param final_onshelves:
    :param first_List:
    :param final_products:
    :param second_List:
    :return: None
    """
    # Zero List appending the final_Suppliers
    for index in range(len(dict_List)):
        for index_2 in range(len(final_suppliers)):
            if dict_List[index][1][1] == final_suppliers[index_2][0]:
                zero_List.append(final_suppliers[index_2] + dict_List[index])

    # First list appending the final_on_shelves and final_Suppliers
    for index in range(len(zero_List)):
        for index_2 in range(len(final_onshelves)):
            if zero_List[index][3] == final_onshelves[index_2][0]:
                line = final_onshelves[index_2] + zero_List[index]
                first_List.append(line)

    # Second List appending the final_products and final_on_shelves and final_Suppliers
    for index in range(len(first_List)):
        for index_2 in range(len(final_products)):
            if first_List[index][0] == final_products[index_2][0]:
                line = first_List[index] + final_products[index_2]
                second_List.append(line)


def remove_Sort(final_list, checker, index):
    """
    This function either sorts or removes a list.

    Its a sequence of if else statements where the checker is passed as a param and then the required evaluation is
    done. When sorting the key uses the index of a list to compare values. When removing the index is used to
    determine which element to remove.

    :param final_list:
    :param checker:
    :param index:
    :return: None

    """
    if checker == 1:
        final_list.remove(final_list[0])
    elif checker == 2:
        final_list.sort(key=lambda max_List: (int(max_List[index])))
    elif checker == 3:
        final_list.sort(key=lambda max_List: (int(max_List[index][index])))
    elif checker == 4:
        final_list.sort(key=lambda max_List: (int(max_List[index]), float(max_List[index + 2])), reverse=True)
    elif checker == 5:
        final_list.sort(key=lambda maximum_List: float(maximum_List[index]), reverse=True)


def print_Highest(final_List, final_Max, availability, outfile):
    """
    This function writes to the file the maximum cost.

    It writes in the required way formatted and also prints the highest cost.
    If multiple values have the same cost then it breaks it into different lines.
    It first checks through the main list and also appends the required information and then adds it to the list-
    temporary_Max


    :param final_Max:
    :param final_List:
    :param availability:
    :param outfile:
    :return: None

    """
    temporary_Max, final_Temp, temp_New_1 = [[], [], []]

    # Find the highest values
    for i in range(len(final_List)):
        for index_2 in range(len(final_Max)):
            if final_Max[index_2][0] == final_List[i][2] and final_Max[index_2][1] == availability:
                temporary_Max.append(final_List[i])

    # Find the highest and append the information into a temp list
    for index in range(len(final_Max)):
        if final_Max[index][1] == availability:
            final_Temp.append(final_Max[index])

    # Now print out the required highest cost
    for index in range(len(temporary_Max)):
        for j in range(len(final_Temp)):
            if temporary_Max[index][2] == final_Temp[j][0] and temporary_Max[index][2] not in temp_New_1:
                temp_New_1.append(temporary_Max[index][2])
                print("Highest cost: " + temporary_Max[index][3] + " " + "(%s)" % temporary_Max[index][2][0:3] + " " + \
                      temporary_Max[index][2][3:6] + " " + temporary_Max[index][2][6:10] + " [$%s]" % availability)
                # Write to the file
                outfile.write("Highest cost: " + temporary_Max[index][3] + " " + "(%s)" % temporary_Max[index][2][0:3] \
                              + " " + temporary_Max[index][2][3:6] + " " + temporary_Max[index][2][6:10] + \
                              " [$%s]" % availability + "\n")


def print_format(checker, cost, outfile):
    """
    This function writes to the file the headers and the required line formatted .

    Using checker as the param it evaluates the condition and then prints out either the header or bottom lines.

    :param checker:
    :param cost:
    :param outfile:
    :return: None

    """
    if checker == 1:
        print("+--------------+------------------+--------+----------------+----------|")
        print("| Product code | Product Name     |Quantity| Supplier       | Cost     |")
        print("+--------------+------------------+--------+----------------+----------|")
        # Write to the file
        outfile.write("+--------------+------------------+--------+----------------+----------|" + "\n")
        outfile.write("| Product code | Product Name     |Quantity| Supplier       | Cost     |" + "\n")
        outfile.write("+--------------+------------------+--------+----------------+----------|" + "\n")
    else:
        print("+--------------+------------------+--------+----------------+----------|")
        print("| Total Cost   |                 $  %1.2f|" % cost)
        print("+--------------+---------------------------+")
        # Write to the file
        outfile.write("+--------------+------------------+--------+----------------+----------|" + "\n")
        outfile.write("| Total Cost   |                 $  %1.2f|" % cost + "\n")
        outfile.write("+--------------+---------------------------+" + "\n")


def print_Table(final_List, index, checker, num_order, price, outfile):
    """
    This function writes the required table onto the order.txt file.

    It formats the lines as required and compares values and prints all the required information
    It also uses the checker param to check which line to write
    Final list is the final list which has all the values and its written indexed wise into the file
    String slicing has been used for the values to be written and the values have been rounded to 2 decimal places.

    :param final_List:
    :param index:
    :param checker:
    :param num_order:
    :param price:
    :param outfile:
    :return: None

    """
    if checker == 1:
        # For the double astrix condition
        print("|  " + final_List[index][0] + " " * 2 + " |" + ("*%s" % final_List[index][-1][0:16]) + " " + "|     " \
              + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][2][0:3] + " " + final_List[index][2][3:6] + \
              " " + final_List[index][2][6:10] + " | $ " + "%6s" % ("%1.2f" % price) + " | ")
        # Write to the file
        outfile.write("|  " + final_List[index][0] + " " * 2 + " |" + ("*%s" % final_List[index][-1][0:16]) + " " + \
                      "|     " + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][2][0:3] + " " + \
                      final_List[index][2][3:6] + " " + final_List[index][2][6:10] + " | $ " + "%6s" % (
                              "%1.2f" % price) + " | " + "\n")
    else:
        # Check the length
        length = (17 - len(final_List[index][-1]))
        if length > 0:
            # Print out this condition if the number is positive as the number of spaces are required
            print("|  " + final_List[index][0] + " " * 2 + " | %s " % (final_List[index][-1][0:16]) + \
                  " " * (length - 1) + "|     " + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][2][0:3] \
                  + " " + final_List[index][2][3:6] + " " + final_List[index][2][6:10] + " | $ " + "%6s" % (
                          "%1.2f" % price) + " | ")
            # Write to the file
            outfile.write("|  " + final_List[index][0] + " " * 2 + " | %s " % (final_List[index][-1][0:16]) + \
                          " " * (length - 1) + "|     " + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][
                                                                                                        2][0:3] + \
                          " " + final_List[index][2][3:6] + " " + final_List[index][2][6:10] + \
                          " | $ " + "%6s" % ("%1.2f" % price) + " | " + "\n")
        else:
            # Print out this condition if the number is negative as no spaces required
            print("|  " + final_List[index][0] + " " * 2 + " | %s " % (final_List[index][-1][0:16]) + "|     " \
                  + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][2][0:3] + " " + final_List[index][2][
                                                                                                3:6] + \
                  " " + final_List[index][2][6:10] + " | $ " + "%6s" % ("%1.2f" % price) + " | ")
            # Write to the file
            outfile.write("|  " + final_List[index][0] + " " * 2 + " | %s " % (final_List[index][-1][0:16]) + "|     " \
                          + "%2s" % str(num_order) + " | " + "(%s)" % final_List[index][2][0:3] + " " + \
                          final_List[index][2][3:6] + " " + final_List[index][2][6:10] + " | $ " + \
                          "%6s" % ("%1.2f" % price) + " | " + "\n")


def duplicate_List(element, list_Lists):
    """
    This function removes all duplicates of a list of lists.

    It first checks the set and only compares the first 'n' elements where here n = 1.
    It then adds it to the set and then yields the items.

    reference : https://stackoverflow.com/questions/7961363/removing-duplicates-in-lists

    :param element:
    :param list_Lists:
    :return: Produces a sequence of values as a generator
    """
    duplicates = set()
    for item in list_Lists:
        comparison = tuple(item[:element])
        if comparison not in duplicates:
            duplicates.add(comparison)
            yield item


def main():
    """
    The main function which does all the operations and calls the required functions when needed.
    It has been divided into sub- blocks of code and a comment on top describes each block of code.
    The declarations followed by the list assignment and then finally sorting and printing the required values.

    :parameter: None
    :return: None

    """
    # All the declarations and assignments
    products, suppliers, onshelves, availability = [[], [], [], []]
    final_products, final_suppliers, final_onshelves, final_availability = [[], [], [], []]
    list_dict, similar_Values, max_List, maximum_List = [[], [], [[]], []]
    first_List, second_List, zero_List = [[], [], []]
    second_Dict = dict()
    cost = 0

    # To read all the files and list assign it
    four_list = ["onshelves.txt", "products.txt", "suppliers.txt", "availability.txt"]
    outfile = open("orders.txt", "w+")
    for index in four_list:
        dict_List = open(index, "r+")
        p = dict_List.read()
        if index == "products.txt":
            products = read(p)
        elif index == "suppliers.txt":
            suppliers = read(p)
        elif index == "onshelves.txt":
            onshelves = read(p)
        elif index == "availability.txt":
            availability = read(p)
        dict_List.close()

    # To read each line in the list and split it accordingly
    for index in products:
        final_products.append(index.split(";"))
    for index in suppliers:
        final_suppliers.append(index.split(";"))
    for index in onshelves:
        final_onshelves.append(index.split("#"))
    for index in availability:
        final_availability.append(index.split(","))
    for index in final_availability:
        index[2] = float(index[2])
    # dict_Assign(final_availability, unique_Dict, choice_2)
    remove_Sort(final_availability, 4, 0)
    copy_Final_Availability = final_availability

    # Convert the list into a dictionary
    for index in final_availability:
        second_Dict[index[0]] = index[2]
    remove_Sort(final_products, 3, 0)

    # Iterate through the dictionary
    for index, final_availability in enumerate(second_Dict.items()):
        max_List = list(final_availability)
        list_dict.append(max_List)

    # Append the similar values into the similar List
    remove_Sort(list_dict, 2, 0)
    for i in range(len(copy_Final_Availability)):
        for index_2 in range(len(list_dict)):
            if list_dict[index_2][0] == copy_Final_Availability[i][0]:
                similar_Values.append(list_dict[index_2] + [(copy_Final_Availability[i][1])])

    # Collecting the minimum values and converting it into a dictionary where the key is the product code
    max_List = dict()
    dict_List = []
    for i in similar_Values:
        max_List[i[0]] = [i[1], i[2]]

    # Convert the dictionary into a list and then sort
    for index, num_order in enumerate(max_List.items()):
        final_Max_List = list(num_order)
        dict_List.append(final_Max_List)
    remove_Sort(dict_List, 2, 0)

    # Call the function Make_all_List so that it combines the lists
    make_Final_List(dict_List, final_suppliers, zero_List, final_onshelves, first_List, final_products, second_List)

    # Remove the duplicate lists of lists and then sort
    final_Max_List = []
    final_List = list(duplicate_List(1, second_List))
    remove_Sort(final_List, 2, 2)

    # Print and write the headers
    print_format(1, cost, outfile)

    # Print and write the final table into the file
    for index in range(len(final_List)):
        num_order = (50 - int((final_List[index][1])))
        # Check if the astrix is required
        if len(final_List[index][8]) > 16 and num_order > 40 and int(final_List[index][1]) < 20:
            price = (num_order * final_List[index][6][0])
            cost += price
            maximum_List.append([final_List[index][2], str(round(price, 2))])
            print_Table(final_List, index, 1, num_order, price, outfile)
        elif int(final_List[index][1]) < 20:
            # Else just print the normal values
            price = (num_order * final_List[index][6][0])
            cost += price
            maximum_List.append([final_List[index][2], str(round(price, 2))])
            print_Table(final_List, index, 2, num_order, price, outfile)

    # round it upto 2 decimal places
    cost = round(cost, 2)
    print_format(2, cost, outfile)

    # Find the maximum supplier cost
    max_list(maximum_List, final_Max_List)
    max_Final = [list(items) for items in {tuple(item) for item in final_Max_List}]
    remove_Sort(max_Final, 5, 1)

    # Print and write the highest cost
    availability = max_Final[0][1]
    print_Highest(final_List, max_Final, availability, outfile)

    outfile.close()


main()
