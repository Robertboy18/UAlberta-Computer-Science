Q1. a)T, b)T, c)F, d)T
Q2. Logical dats independenc refers to the separation of applications from changes in the conceptual structure of the database. This means the structure of data can change at the conceptual layer without changing the applications. See the textbook for more details (including examples). 
Q3. 
 a) midterm-er.gif 
 b) Here are the tables and the primary key (PK) and foreign key (FK) constraints:
  sale(start, end)	PK:(start,end)
  product(upc, qty, price)	PK:upc
  onsale(upc, start, end, saleprice)	PK: (upc,start,end), 
	FK: upc ref product, FK: (start,end) ref sale
  seasonal(upc, season)	PK: upc		FK: upc ref product

  Here are the acutal 'create table' statements, given for completeness (otherwise the table description above is sufficient).

  CREATE TABLE sale (
    start	date,
    end		date,
    PRIMARY KEY (start,end)
  );
  CREATE TABLE product (
    upc		char(8),
    qty		int,
    price	real,
    PRIMARY KEY (upc)
  );
  CREATE TABLE onsale (
    upc		char(8),
    start	date,
    end		date,
    saleprice	real,
    PRIMARY KEY (upc, start, end),
    FOREIGN KEY (upc) REFERENCES product,
    FOREIGN KEY (start,end) REFERENCES sale
  );
  CREATE TABLE seasonal (
    upc		char(8),
    season	char(6),
    PRIMARY KEY (upc),
    FOREIGN KEY (upc) REFERENCES product ON DELETE CASCASE
  );

Q4.
 a) select r1.customer
    from rents r1, movies m1, rents r2, movies m2
    where r1.title=m1.title and m1.category='action' and  
          r2.title=m2.title and m2.category='family' and
          r1.customer=r2.customer
 
 b) select title, price
    from movies m, classes c
    where m.rent_type=c.rent_type
      and title like '%star%'
    order by price asc

 c) select m1.category, m2.category
    from movies m1, rents r1, movies m2, rents r2
    where m1.title=r1.title and m2.title=r2.title and 
          r1.customer=r2.customer and m1.category!=m2.category
    group by m1.category, m2.category
    having count(distinct r1.customer) >=5
 
 d) select rent_type, count(distinct m.title), count(*)
    from movies m, rents r
    where m.title=r.title
    group by rent_type

Q5.
 a) select m1.category, m2.category
    from movies m1, rents r1, movies m2, rents r2
    where m1.title=r1.title and m2.title=r2.title and
          r1.customer=r2.customer and m1.category>m2.category
    group by m1.category, m2.category
    having count(distinct r1.customer) >=5;

 b) select rent_type, count(distinct title), count(customer)
    from classes left outer join movies using (rent_type) 
         left outer join rents using (title)
    group by rent_type;
Q6. Let PROJECT and SELECT respectively denote relational algebra projection and selection (for the ease of writing our queries in text).

 a) PROJECT_{title} SELECT_{category='comedy'} (movies)
 b) PROJECT_{customer,title} rents / 
    PROJECT_{title} SELECT_{title <> 'it is a wonderful life'} (movies)
Q7.
 a) Joe Allen
 b) 2
